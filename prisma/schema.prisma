generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String?
  password         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             users_role?
  emailVerified    DateTime?
  image            String?
  provider         String?            @db.VarChar(255)
  accounts         accounts[]
  customQuestions  CustomQuestion[]
  quizzes          Quiz[]             @relation("UserQuizzes")
  sessions         sessions[]
  quiz_assignments quiz_assignments[] @relation("StudentAssignments")

  @@map("users")
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  customQuestions CustomQuestion[]
  questions       Question[]
  quizzes         Quiz[]
  topics          Topic[]

  @@map("subjects")
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  subjectId Int
  quizzes   Quiz[]
  subject   Subject    @relation(fields: [subjectId], references: [id])
  questions Question[] @relation("TopicQuestions") // <--- Add this line

  @@index([subjectId], map: "topics_subjectId_fkey")
  @@map("topics")
}

model Quiz {
  id                Int                @id @default(autoincrement())
  quizOwnedBy       Int
  duration          Int
  subjectId         Int
  topicId           Int?
  numberOfQuestions Int                @default(0)
  createdAt         DateTime           @default(now())
  finished_at       DateTime?
  start_time        DateTime?
  yearEnd           Int
  yearStart         Int
  title             String             @default("Untitled Quiz")
  type              QuizType           @default(REGULAR)
  rubricType        String             @default("default")
  customRubric      String?
  quiz_assignments  quiz_assignments[]
  owner             User               @relation("UserQuizzes", fields: [quizOwnedBy], references: [id])
  subject           Subject            @relation(fields: [subjectId], references: [id])
  topic             Topic?             @relation(fields: [topicId], references: [id])
  questions         Question[]         @relation("QuestionToQuiz")

  @@index([quizOwnedBy], map: "quizzes_quizOwnedBy_fkey")
  @@index([subjectId], map: "quizzes_subjectId_fkey")
  @@index([topicId], map: "quizzes_topicId_fkey")
  @@map("quizzes")
}

model CustomQuestion {
  id          Int     @id @default(autoincrement())
  description String
  subjectId   Int
  authorId    Int
  author      User    @relation(fields: [authorId], references: [id])
  subject     Subject @relation(fields: [subjectId], references: [id])

  @@index([authorId], map: "custom_questions_authorId_fkey")
  @@index([subjectId], map: "custom_questions_subjectId_fkey")
  @@map("custom_questions")
}

model Question {
  id           Int                   @id @default(autoincrement())
  uuid         String                @unique
  description  String
  difficulty   String
  subjectId    Int
  topicId      Int?                  @default(1)
  year         Int
  createdAt    DateTime              @default(now())
  explanations QuestionExplanation[]
  subject      Subject               @relation(fields: [subjectId], references: [id])
  topic        Topic?                @relation(fields: [topicId], references: [id], name: "TopicQuestions") // <--- Add the relation name here
  quizzes      Quiz[]                @relation("QuestionToQuiz")

  @@index([subjectId], map: "questions_subjectId_fkey")
  @@index([topicId], map: "questions_topicId_fkey")
  @@map("questions")
}

model QuestionExplanation {
  id         Int      @id @default(autoincrement())
  questionId Int
  feedback   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId], map: "question_explanations_questionId_fkey")
  @@map("question_explanations")
}

model accounts {
  id                String  @id
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
}

model quiz_assignments {
  id            Int      @id @default(autoincrement())
  quizId        Int
  shareableLink String   @unique
  quizzes       Quiz     @relation(fields: [quizId], references: [id])
  users         User[]   @relation("StudentAssignments")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@index([quizId], map: "quiz_assignments_quizId_fkey")
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum users_role {
  ADMIN
  STUDENT
  TEACHER
}

enum QuizType {
  REGULAR
  ASSIGNED
}